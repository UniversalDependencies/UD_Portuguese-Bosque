(ql:quickload :cl-conllu)
(ql:quickload :split-sequence)

(in-package :cl-conllu)

(defun has-feature (key features)
  (unless (string-equal "_" features)
    (find key (split-sequence #\| features) :key (lambda (x) (first (split-sequence #\= x))) :test #'equal)))

(defun has-tag (xpostag tag)
  (if (string= "_" xpostag)
      (string= tag xpostag)
      (member tag (split-sequence:split-sequence #\| xpostag) :test #'equal)))

(defun append-feature (key value feats)
  (let* ((features (if (string= "_" feats) nil
                       (split-sequence #\| feats))))
    (format nil "~{~a~^|~}" (remove-duplicates
                             (sort
                              (append features `(,(if (and key value) 
                                                      (format nil "~a=~a" key value)
                                                      (format nil "~a" value)))) #'string<)
                             :test #'equal))))

(defparameter *mappings* '(("a DET _" "Art")
                           ("A DET _" "Art")
                           ("a DET <-sam>" "Art")
                           ("algo PRON <quant>" "Ind")
                           ("algum DET <cjt>" "Ind")
                           ("algum DET <quant>" "Ind")
                           ("algum DET <-sam>" "Ind")
                           ("algum PRON <first-cjt>" "Ind")
                           ("algum PRON <quant>" "Ind")
                           ("algum PRON <-sam>" "Ind")
                           ("ambos DET <cjt>" "Tot")
                           ("ambos DET DET" "Tot")
                           ("ambos DET <quant>" "Tot")
                           ("ambos PRON <quant>" "Tot")
                           ("a PRON <-sam>" "Dem")
                           ("bastante DET DET" "Ind")
                           ("cada DET DET" "Tot")
                           ("cada DET <quant>" "Tot")
                           ("cada PRON DET" "Tot")
                           ("certo DET <quant>" "Ind")
                           ("certo PRON <cjt>" "Ind")
                           ("certos DET <quant>" "Ind")
                           ("demais DET DET" "Ind")
                           ("demais DET <quant>" "Ind")
                           ("demais PRON <np-def>" "Ind")
                           ("dezena DET <quant>" "Ind")
                           ("dezena PRON <quant>" "Ind")
                           ("diferentes DET <quant>" "Ind")
                           ("diferentes PRON <quant>" "Ind")
                           ("diversos DET <quant>" "Ind")
                           ("este DET <-sam>" "Dem")
                           ("la DET DET" "Art")
                           ("menos DET <quant>" "Ind")
                           ("mesmo DET <ident>" "Emp")
                           ("mesmo PRON <diff>" "Dem")
                           ("mesmo PRON <quant>" "Dem")
                           ("meu DET <poss>" "Prs")
                           ("meu PRON <poss>" "Prs")
                           ("muitíssimo DET <quant>" "Ind")
                           ("muito DET <first-cjt>" "Ind")
                           ("muito DET <KOMP>" "Ind")
                           ("muito DET <quant>" "Ind")
                           ("muito PRON <cjt>" "Ind")
                           ("muito PRON <first-cjt>" "Ind")
                           ("muito PRON <KOMP>" "Ind")
                           ("muito PRON <quant>" "Ind")
                           ("nenhum DET <cjt>" "Neg")
                           ("nenhum DET <quant>" "Neg")
                           ("nenhum PRON <quant>" "Neg")
                           ("nosso DET <poss>" "Prs")
                           ("nosso PRON <poss>" "Prs")
                           ("o DET _" "Art")
                           ("O DET _" "Art")
                           ("o DET DET" "Art")
                           ("o DET <-sam>" "Art")
                           ("o PRON _" "Dem")
                           ("o PRON DET" "Dem")
                           ("o PRON <first-cjt>" "Dem")
                           ("o PRON <-sam>" "Dem")
                           ("outro DET <cjt>" "Ind")
                           ("outro DET <diff>" "Ind")
                           ("outro DET <first-cjt>" "Ind")
                           ("outro DET <KOMP>" "Ind")
                           ("outro DET <n>" "Ind")
                           ("outro DET <-sam>" "Ind")
                           ("outro PRON <cjt>" "Ind")
                           ("outro PRON <diff>" "Ind")
                           ("outro PRON <first-cjt>" "Ind")
                           ("outro PRON <KOMP>" "Ind")
                           ("outro PRON <np-def>" "Ind")
                           ("outro PRON <-sam>" "Ind")
                           ("pouco DET <cjt>" "Ind")
                           ("pouco DET DET" "Ind")
                           ("pouco DET <first-cjt>" "Ind")
                           ("pouco DET <quant>" "Ind")
                           ("pouco PRON DET" "Dem")
                           ("pouco PRON <quant>" "Dem")
                           ("próprio DET <ident>" "Emp")
                           ("qualquer DET <cjt>" "Ind")
                           ("qualquer DET DET" "Ind")
                           ("qualquer DET <quant>" "Ind")
                           ("qualquer PRON <quant>" "Ind")
                           ("qualquier DET <quant>" "Ind")
                           ("que DET DET" "Ind")
                           ("semelhante DET <diff>" "Dem")
                           ("seu DET <cjt>" "Prs")
                           ("seu DET <poss>" "Prs")
                           ("seu PRON <cjt>" "Prs")
                           ("seu PRON <poss>" "Prs")
                           ("tal DET DET" "Ind")
                           ("tal DET <diff>" "Ind")
                           ("tal PRON <diff>" "Ind")
                           ("tal PRON <KOMP>" "Ind")
                           ("tanto DET <quant>" "Ind")
                           ("tanto PRON <quant>" "Ind")
                           ("teu DET <poss>" "Prs")
                           ("toda DET <quant>" "Tot")
                           ("todas PRON <quant>" "Tot")
                           ("todo DET DET" "Tot")
                           ("todo DET <first-cjt>" "Tot")
                           ("todo DET <quant>" "Tot")
                           ("todo PRON <cjt>" "Tot")
                           ("todo PRON <quant>" "Tot")
                           ("tudo DET <quant>" "Tot")
                           ("tudo PRON <quant>" "Tot")
                           ("um DET DET" "Art")
                           ("um DET <diff>" "Art")
                           ("um DET <quant>" "Art")
                           ("um DET <-sam>" "Art")
                           ("um PRON <cjt>" "Ind")
                           ("um PRON <first-cjt>" "Ind")
                           ("um PRON <np-def>" "Ind")
                           ("um PRON <quant>" "Ind")
                           ("um PRON <-sam>" "Ind")
                           ("várias DET <cjt>" "Ind")
                           ("várias DET <quant>" "Ind")
                           ("várias PRON <quant>" "Ind")
                           ("vários DET <quant>" "Ind")
                           ("vários PRON <quant>" "Ind")
                           ("vosso DET <poss>" "Prs")))

(defun fix (token)
  (dolist (mapping *mappings*)
    (let* ((lhs (split-sequence:split-sequence #\space (first mapping)))
           (rhs (second mapping))
           (lemma (first lhs))
           (upostag (second lhs))
           (tag (third lhs)))
      (when (and (string= lemma (token-lemma token))
                 (string= upostag (token-upostag token))
                 (has-tag (token-xpostag token) tag))
        (unless (has-feature "PronType" (token-feats token))
          (setf (token-feats token) (append-feature "PronType" rhs (token-feats token))))))))

(defun fix-sentences (sentences)
  (mapc (lambda (s) (mapc #'fix (sentence-tokens s))) sentences))

(defun run ()
  (dolist (fn (directory "documents/*.conllu"))
    (write-conllu (fix-sentences (read-conllu fn)) fn)))

